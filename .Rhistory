# engorged ticks, and the cumulative degree week for those engorged ticks. This is the same for Larvae, Nymphs, and Adults
Tick <- R6Class(classname = "Tick",
private = list(), #private methods and fields
public = list(seeking = NULL,
lifespan = NULL,
on_host = NULL,
surplus = NULL,
engorged = NULL,
CDW = NULL,
initialize = function(lifespan, total_wks) {
self$seeking <- mat.or.vec(lifespan, total_wks) #up to total week # of cohorts, max life of each is lifespan
self$lifespan <- mat.or.vec(lifespan, total_wks) #tracks lifespan of cohort (max - 3 wks per weeks questing)
self$on_host <- mat.or.vec(1, total_wks) #Ticks are on a host for a week
self$surplus <- mat.or.vec(1, total_wks) #Larvae that exceed host carrying capacity.
self$engorged <- mat.or.vec(total_wks, total_wks) #Engorged ticks
self$CDW <- mat.or.vec(total_wks, total_wks) #Cumulative Degree Week for Engorged ticks
}) #public methods and fields
)
### Here I have simply created child classes with the appropriate names, but the same behavior.
Larvae <- R6Class(classname = "Larvae", inherit = Tick)
Nymphs <- R6Class(classname = "Nymphs", inherit = Tick)
Adults <- R6Class(classname = "Adults", inherit = Tick)
### And Here I create instances of those objects. Note, must give lifespan and total weeks variables to construct the object.
larvae = Larvae$new(lifespan = lifespan, total_wks = total_wks)
nymphs = Nymphs$new(lifespan = lifespan, total_wks = total_wks)
adults = Adults$new(lifespan = lifespan, total_wks = total_wks)
### To keep the pattern, Also define a R6 class for eggs.
Eggs <- R6Class(classname = "Eggs",
public = list(eggs = NULL,
CDW = NULL,
initialize = function(total_wks) {
self$eggs <- mat.or.vec(total_wks, total_wks)
self$CDW <- mat.or.vec(total_wks, total_wks)
}))
eggs <- Eggs$new(total_wks = total_wks)
###############################
### Now I'll create a simple host population.
# Host populations will not be modeled as intensely as ticks
# Things to keep track of:
# host body burdens
# infected body burdens
# % infected hosts
# new infected hosts
# Same goes for predators!
#A generic "organism" class
Organism <- R6Class(classname = "Organism",
public = list(density = NULL, #Host density
burden = NULL, #Tick burden by tick stage
i_burden = NULL, #Infected tick burden by tick stage
i_perc = NULL, #Percent infected hosts
i_new = NULL, #New infected hosts
capacity = NULL, #Carrying capacity of ticks by life stage
K = NULL, #Avg ticks of each stage per host
initialize = function(total_wks) {
self$density <- vector(length = total_wks)
self$burden <- mat.or.vec(3, total_wks)
self$i_burden <- mat.or.vec(3, total_wks)
self$i_perc <- vector(length = total_wks)
self$i_new <- vector(length = total_wks)
self$capacity <- mat.or.vec(3, total_wks)
self$K <- vector(length = 3)
}))
#Create a host and predator class that inhertis Organism
Host <- R6Class(classname = "Host", inherit = Organism)
Predator <- R6Class(classname = "Predator", inherit = Organism)
#Instantiate the classes
host <- Host$new(total_wks)
predator <- Predator$new(total_wks)
### Now lets create a simple tick population, just to get familiar with working with this kind of structure again.
temps <- abs(rnorm(n = total_wks, mean = 10, sd = 20)) # A vector of random temperature values for each week
#inital values
total_wks <- 52
lifespan <- 80
E_CDW <- 110.0
L_CDW <- 58.0
N_CDW <- 81.0
A_CDW <- 28.0
mu_E <- 0.9
mu_L <- 0.9
mu_N <- 0.9
mu_A <- 0.9
eggs$eggs[1][1] <- 1000
larvae$seeking[1,1] <- 100
nymphs$seeking[1,1] <- 100
adults$seeking[1,1] <- 100
host$density[1] <- 1000
predator$density[1] <- 10
host$K <- c(100, 20, 5)
HFR <- 0.8
# Run for total_wks steps
for (week in 1:total_wks) {
host$capacity[1, week] <- host$density[week]*host$K[1] #update host larval capacity
host$capacity[2, week] <- host$density[week]*host$K[2] #update host nymph capacity
host$capacity[3, week] <- host$density[week]*host$K[3] #update host adult capacity
#There are as many cohorts as the current week, and each one must be checked.
for (cohort in week:1) {
#For eggs:
week_check <- week - cohort + 1
if (eggs$eggs[cohort, week_check] > 0) { #if # of eggs for this cohort's current week is zero, then they have already hatched.
#update this cohort's CDW
week_CDW <- eggs$CDW[cohort, week_check] + temps[week] #Calculate CDW
eggs$CDW[cohort, week_check] <- week_CDW #Update
#Hatch if at least at threshold for maturation
if (week_CDW >= E_CDW) {
#Don't need to update next week's # eggs for this cohort, since already 0.
#Add to larval seeking cohort (hatching into the next week)
larvae$seeking[week + 1, 1] <- eggs$eggs[cohort, week_check] + larvae$seeking[week + 1, 1] #Last bit might be unnecessary...
larvae$lifespan[week + 1, 1] <- lifespan
#update larvae
} else {
#Else, survive
eggs$eggs[cohort, week_check + 1] <- eggs$eggs[cohort, week_check]*mu_E
eggs$CDW[cohort, week_check + 1] <- week_CDW #Send CDW to next week
}
}
#For Larvae
if (larvae$seeking[cohort, week_check] > 0) { #if # of HSL is zero, all died or found hosts
#seeking Larvae must survive the week
survived <- larvae$seeking[cohort, week_check]*mu_L
#seeking Larvae seek for a host. For simplicity here, we'll assume the host finding rate is 0.8, 80% ticks are seeking.
Want_Host <- survived*HFR
Found_Host <- survived*HFR #normally this would be multiplied by the host type's finding rate
if (Found_Host + host$burden[1, week + 1] < host$capacity[1, week + 1]) { #if burden next week doesn't exceed K
host$burden[1, week + 1] <- host$burden[1, week + 1] + Found_Host
} else {
Found_Host <- host$capacity[1, week+ 1] #########Possibly week?
host$burden[1, week + 1] <- host$capacity[1,week]
}
surplus <- Want_Host - Found_Host
if (surplus < 0) {
surplus <- 0
}
larvae$surplus[week + 1] <- larvae$surplus[week + 1] + surplus
#those that find hosts must enter on host matrix, and host burden
#those that don't find hosts lose lifespan
}
}
}
larvae[["surplus"]]
larvae[["seeking"]]
cohort
week
# Run for total_wks steps
for (week in 1:1) {
host$capacity[1, week] <- host$density[week]*host$K[1] #update host larval capacity
host$capacity[2, week] <- host$density[week]*host$K[2] #update host nymph capacity
host$capacity[3, week] <- host$density[week]*host$K[3] #update host adult capacity
#There are as many cohorts as the current week, and each one must be checked.
for (cohort in week:1) {
#For eggs:
week_check <- week - cohort + 1
if (eggs$eggs[cohort, week_check] > 0) { #if # of eggs for this cohort's current week is zero, then they have already hatched.
#update this cohort's CDW
week_CDW <- eggs$CDW[cohort, week_check] + temps[week] #Calculate CDW
eggs$CDW[cohort, week_check] <- week_CDW #Update
#Hatch if at least at threshold for maturation
if (week_CDW >= E_CDW) {
#Don't need to update next week's # eggs for this cohort, since already 0.
#Add to larval seeking cohort (hatching into the next week)
larvae$seeking[week + 1, 1] <- eggs$eggs[cohort, week_check] + larvae$seeking[week + 1, 1] #Last bit might be unnecessary...
larvae$lifespan[week + 1, 1] <- lifespan
#update larvae
} else {
#Else, survive
eggs$eggs[cohort, week_check + 1] <- eggs$eggs[cohort, week_check]*mu_E
eggs$CDW[cohort, week_check + 1] <- week_CDW #Send CDW to next week
}
}
#For Larvae
if (larvae$seeking[cohort, week_check] > 0) { #if # of HSL is zero, all died or found hosts
#seeking Larvae must survive the week
survived <- larvae$seeking[cohort, week_check]*mu_L
#seeking Larvae seek for a host. For simplicity here, we'll assume the host finding rate is 0.8, 80% ticks are seeking.
Want_Host <- survived*HFR
Found_Host <- survived*HFR #normally this would be multiplied by the host type's finding rate
if (Found_Host + host$burden[1, week + 1] < host$capacity[1, week + 1]) { #if burden next week doesn't exceed K
host$burden[1, week + 1] <- host$burden[1, week + 1] + Found_Host
} else {
Found_Host <- host$capacity[1, week+ 1] #########Possibly week?
host$burden[1, week + 1] <- host$capacity[1,week]
}
surplus <- Want_Host - Found_Host
if (surplus < 0) {
surplus <- 0
}
larvae$surplus[week + 1] <- larvae$surplus[week + 1] + surplus
#those that find hosts must enter on host matrix, and host burden
#those that don't find hosts lose lifespan
}
}
}
#inital values
total_wks <- 52
lifespan <- 80
E_CDW <- 110.0
L_CDW <- 58.0
N_CDW <- 81.0
A_CDW <- 28.0
mu_E <- 0.9
mu_L <- 0.9
mu_N <- 0.9
mu_A <- 0.9
eggs$eggs[1][1] <- 1000
larvae$seeking[1,1] <- 100
nymphs$seeking[1,1] <- 100
adults$seeking[1,1] <- 100
host$density[1] <- 1000
predator$density[1] <- 10
host$K <- c(100, 20, 5)
HFR <- 0.8
# Run for total_wks steps
for (week in 1:1) {
host$capacity[1, week] <- host$density[week]*host$K[1] #update host larval capacity
host$capacity[2, week] <- host$density[week]*host$K[2] #update host nymph capacity
host$capacity[3, week] <- host$density[week]*host$K[3] #update host adult capacity
#There are as many cohorts as the current week, and each one must be checked.
for (cohort in week:1) {
#For eggs:
week_check <- week - cohort + 1
if (eggs$eggs[cohort, week_check] > 0) { #if # of eggs for this cohort's current week is zero, then they have already hatched.
#update this cohort's CDW
week_CDW <- eggs$CDW[cohort, week_check] + temps[week] #Calculate CDW
eggs$CDW[cohort, week_check] <- week_CDW #Update
#Hatch if at least at threshold for maturation
if (week_CDW >= E_CDW) {
#Don't need to update next week's # eggs for this cohort, since already 0.
#Add to larval seeking cohort (hatching into the next week)
larvae$seeking[week + 1, 1] <- eggs$eggs[cohort, week_check] + larvae$seeking[week + 1, 1] #Last bit might be unnecessary...
larvae$lifespan[week + 1, 1] <- lifespan
#update larvae
} else {
#Else, survive
eggs$eggs[cohort, week_check + 1] <- eggs$eggs[cohort, week_check]*mu_E
eggs$CDW[cohort, week_check + 1] <- week_CDW #Send CDW to next week
}
}
#For Larvae
if (larvae$seeking[cohort, week_check] > 0) { #if # of HSL is zero, all died or found hosts
#seeking Larvae must survive the week
survived <- larvae$seeking[cohort, week_check]*mu_L
#seeking Larvae seek for a host. For simplicity here, we'll assume the host finding rate is 0.8, 80% ticks are seeking.
Want_Host <- survived*HFR
Found_Host <- survived*HFR #normally this would be multiplied by the host type's finding rate
if (Found_Host + host$burden[1, week + 1] < host$capacity[1, week + 1]) { #if burden next week doesn't exceed K
host$burden[1, week + 1] <- host$burden[1, week + 1] + Found_Host
} else {
Found_Host <- host$capacity[1, week+ 1] #########Possibly week?
host$burden[1, week + 1] <- host$capacity[1,week]
}
surplus <- Want_Host - Found_Host
if (surplus < 0) {
surplus <- 0
}
larvae$surplus[week + 1] <- larvae$surplus[week + 1] + surplus
#those that find hosts must enter on host matrix, and host burden
#those that don't find hosts lose lifespan
}
}
}
View(host)
View(host)
# Recoding of Mount, Haile and Daniels: Simulation of Blacklegged Tick (Acari: Ixodidae)
# Population Dynamics and Transmission of Borrelia burgdorferi
# J. Med. Entomol. 34(4): 461-484 (1997)
rm(list=ls())
num_tick_steps = 75 # for monte carlo simulation
num_sims = 1000 # for monte carlo simulation
host_infected = mat.or.vec(num_tick_steps,num_sims)
perc_trans = mat.or.vec(1,num_tick_steps)
for (i in 1:num_tick_steps)
{
for (sim in 1:num_sims)
{
num_infected_ticks = i*10
y = sample(c(1:100), num_infected_ticks, replace = TRUE)
host_infected[i,sim] = length(unique(y))
}
perc_trans[i] = mean(host_infected[i,])
}
for (i in 1:num_tick_steps)
{
for (sim in 1:num_sims)
{
num_infected_ticks = i*10
y = sample(c(1:100), num_infected_ticks, replace = TRUE)
host_infected[i,sim] = length(unique(y))
}
perc_trans[i] = mean(host_infected[i,])
}
for (i in 1:num_tick_steps)
{
for (sim in 1:num_sims)
{
num_infected_ticks = i*10
y = sample(c(1:100), num_infected_ticks, replace = TRUE)
host_infected[i,sim] = length(unique(y))
}
perc_trans[i] = mean(host_infected[i,])
}
View(host_infected)
View(perc_trans)
####################
#Author: Joseph Savage
#Start Date: June 18, 2020
####################
#The main model structure is run from this file, with various algorithms sourced from "Behaviors.R"
rm(list=ls()) #Clear the environment
library(sys)
library(httr)
install.packages("getPass")
library(getPass)
--version
(10 + 5)*(10 + 5)
10*(10 + 5)
5*(10 + 5)
150 + 75
x <- seq(from = 0, to = 10, by = 0.1)
y <- x*2-5
y <- x*2-5
x <- seq(from = 0, to = 10, by = 0.1)
y <- x*2-5
plot(x = x, y = y)
3*2 - 5
6*2 - 5
y <- x*2
plot(x = x, y = y)
3*2 - 5
6*2 - 5
3*2 - 5
3*2
6*2
3*2 - 5
8*2 - 5
3*2 - 5 + 5*2 - 5
8*2 - 5
3*2 - 5 + 5*2 - 5
3*2 - 5 + 5*2 - 5
8*2 - 5
3*2 - 5
6*2 - 5
3*2
6*2
8
3*2
8*2
3*2 + 5 * 2
8*2
(10*(3 + 4)(6 + 2))/(11 + (3 + 4))
(10*(3 + 4)*(6 + 2))/(11 + (3 + 4))
(10*(3)*(6 + 2))/(11 + (3)) + (10*(4)*(6 + 2))/(11 + (4))
(10*(3)*(6 + 2))/(11 + (3+4)) + (10*(4)*(6 + 2))/(11 + (3+4))
(10*(3+4)*(6 + 2))/(11 + (3+4)) + (10*(3+ 4)*(6 + 2))/(11 + (3+4))
(10*(3+4)*(6 + 2))/(11 + (3+4))*3/(3+4) + (10*(3+ 4)*(6 + 2))/(11 + (3+4))*4/(4 + 3)
x <- vector(length = 10)
x <- rnorm(10)
y <- rnorm(10)
plot(x, y)
plot(x, y, xaxt='n')
xticks <- seq(from = 1, to = 10, by = 1)
xticks <- seq(from = min(x), to = max(x), by = 0.1) # Make a vector for your axis ticks
axis(side=1, at = xticks) # Set the ticks. side 1 is the bottom (x-axis)
axis(side=1, at = xticks, labels = FALSE) # Set the ticks. side 1 is the bottom (x-axis)
plot(x, y, xaxt='n')
xticks <- seq(from = min(x), to = max(x), by = 0.1) # Make a vector for your axis ticks
axis(side=1, at = xticks, labels = FALSE) # Set the ticks. side 1 is the bottom (x-axis)
x <- rnorm(10)
y <- rnorm(10)
plot(x, y, xaxt='n')
xticks <- seq(from = min(x), to = max(x), by = 0.1) # Make a vector for your axis ticks
axis(side=1, at = xticks) # Set the ticks. side 1 is the bottom (x-axis)
library(package = "deSolve")
#S: susceptibles, I: infectious, R: recovered, beta: infection rate, gamma: recovery rate
# dS/dt = -beta*S*I  Losing succeptibles
# dI/dt = beta*S*I - gamma*I   Gaining infected, flow from S to I
# dR/dt = gamma*I   Gaining recovereds, flow from I to R
SIR <- function(time, init, params) {
with(as.list(c(init, params)), {
dS <- -beta*S*I + 0.01*sin(time)
dI <- beta*S*I - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
}
sir_init <- c(S = 0.999, I = 0.001, R = 0)
sir_parms <- c(beta = 0.2, gamma = 1/11)
sir_t <- seq(from = 0, to = 200, by = 0.01)
sir_out <- ode(y = sir_init, times = sir_t, func = SIR, parms = sir_parms)
plot(x = sir_out[,1], y = sir_out[,2], type = "l", ylim = c(0, 1), xlab = "Time", ylab = "Population")
lines(x = sir_out[,1], y = sir_out[,3], col = "red")
lines(x = sir_out[,1], y = sir_out[,4], col = "blue")
legend(x = 150, y = 0.6, legend = c("Succeptible", "Infectious", "Recovered"), col = c("black", "red", "blue"), lwd = 2)
head(sir_out)
with(as.list(c(init, params)), {
dS <- -beta*S*I #+ 0.01*sin(time)
dI <- beta*S*I - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
SIR <- function(time, init, params) {
with(as.list(c(init, params)), {
dS <- -beta*S*I #+ 0.01*sin(time)
dI <- beta*S*I - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
}
library(package = "deSolve")
#S: susceptibles, I: infectious, R: recovered, beta: infection rate, gamma: recovery rate
# dS/dt = -beta*S*I  Losing succeptibles
# dI/dt = beta*S*I - gamma*I   Gaining infected, flow from S to I
# dR/dt = gamma*I   Gaining recovereds, flow from I to R
SIR <- function(time, init, params) {
with(as.list(c(init, params)), {
dS <- -beta*S*I #+ 0.01*sin(time)
dI <- beta*S*I - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
}
sir_init <- c(S = 0.999, I = 0.001, R = 0)
sir_parms <- c(beta = 0.2, gamma = 1/11)
sir_t <- seq(from = 0, to = 200, by = 0.01)
sir_out <- ode(y = sir_init, times = sir_t, func = SIR, parms = sir_parms)
plot(x = sir_out[,1], y = sir_out[,2], type = "l", ylim = c(0, 1), xlab = "Time", ylab = "Population")
lines(x = sir_out[,1], y = sir_out[,3], col = "red")
lines(x = sir_out[,1], y = sir_out[,4], col = "blue")
legend(x = 150, y = 0.6, legend = c("Succeptible", "Infectious", "Recovered"), col = c("black", "red", "blue"), lwd = 2)
head(sir_out)
dI <- (beta*S*I)/(S + I + R) - gamma*I
SIR <- function(time, init, params) {
with(as.list(c(init, params)), {
dS <- (-beta*S*I)/(S + I + R) #+ 0.01*sin(time)
dI <- (beta*S*I)/(S + I + R) - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
}
library(package = "deSolve")
#S: susceptibles, I: infectious, R: recovered, beta: infection rate, gamma: recovery rate
# dS/dt = -beta*S*I  Losing succeptibles
# dI/dt = beta*S*I - gamma*I   Gaining infected, flow from S to I
# dR/dt = gamma*I   Gaining recovereds, flow from I to R
SIR <- function(time, init, params) {
with(as.list(c(init, params)), {
dS <- (-beta*S*I)/(S + I + R) #+ 0.01*sin(time)
dI <- (beta*S*I)/(S + I + R) - gamma*I
dR <- gamma*I
#  print(sin(time)
return(list(c(dS, dI, dR)))
})
}
sir_init <- c(S = 0.999, I = 0.001, R = 0)
sir_parms <- c(beta = 0.2, gamma = 1/11)
sir_t <- seq(from = 0, to = 200, by = 0.01)
sir_out <- ode(y = sir_init, times = sir_t, func = SIR, parms = sir_parms)
plot(x = sir_out[,1], y = sir_out[,2], type = "l", ylim = c(0, 1), xlab = "Time", ylab = "Population")
lines(x = sir_out[,1], y = sir_out[,3], col = "red")
lines(x = sir_out[,1], y = sir_out[,4], col = "blue")
legend(x = 150, y = 0.6, legend = c("Succeptible", "Infectious", "Recovered"), col = c("black", "red", "blue"), lwd = 2)
head(sir_out)
setwd("C:/Users/15 7000 Gaming/Desktop/Existence/College/Research/Myrmecochory")
myrm <- read.csv("Data/NASDMyrmecoBiogeo.csv")
head(myrm)
head(mut)
mut <- read.csv("Data/NASDMyrmecoBiogeo.csv")
head(mut)
View(mut)
myrm_inds <- which(mut$pri.mode == 'myrmeco' || mut$sec.mode == 'myrmeco')
myrm_inds <- which(mut$pri.mode == 'myrmeco')
myrm_inds <- which(mut$pri.mode == 'myrmeco' | mut$sec.mode == 'myrmeco')
myrm_inds <- which(mut$pri.mode == 'myrmeco' | mut$sec.mode == 'myrmeco')
myrm <- mut[myrm_inds]
myrm <- mut[,myrm_inds]
myrm <- mut[myrm_inds,]
View(myrm)
num_genera <- unique(myrm$genus)
View(myrm)
write.table(x = myrm, file = "Data/Myrmeco_Spp")
write.table(x = myrm, file = "Data/Myrmeco_Spp.csv")
write.table(x = myrm, file = "Data/Myrmeco_Spp.csv", sep = ",")
View(myrm)
write.table(x = myrm, file = "Data/Myrmeco_Spp.csv", sep = ",", row.names = FALSE)
write.table(x = myrm, file = "Data/Myrmeco_Spp.csv", sep = ",", row.names = F)
colby <- read.csv("ColbyCovid.csv")
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l", ylim = c(0, max(colby[3,2:length(colby[1,])])))
lines(x = 1:(length(colby[1,]) - 1), y = colby[1,2:length(colby[1,])])
lines(x = 1:(length(colby[2,]) - 1), y = colby[2,2:length(colby[2,])])
setwd("C:/Users/15 7000 Gaming/Desktop/Existence/College/Code/CovidPlotter")
colby <- read.csv("ColbyCovid.csv")
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l", ylim = c(0, max(colby[3,2:length(colby[1,])])))
lines(x = 1:(length(colby[1,]) - 1), y = colby[1,2:length(colby[1,])])
lines(x = 1:(length(colby[2,]) - 1), y = colby[2,2:length(colby[2,])])
colby <- read.csv("ColbyCovid.csv")
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l", ylim = c(0, max(colby[3,2:length(colby[1,])])))
lines(x = 1:(length(colby[1,]) - 1), y = colby[1,2:length(colby[1,])])
lines(x = 1:(length(colby[2,]) - 1), y = colby[2,2:length(colby[2,])])
colby <- read.csv("ColbyCovid.csv")
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l", ylim = c(0, max(colby[3,2:length(colby[1,])])))
lines(x = 1:(length(colby[1,]) - 1), y = colby[1,2:length(colby[1,])])
lines(x = 1:(length(colby[2,]) - 1), y = colby[2,2:length(colby[2,])])
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l")#, ylim = c(0, max(colby[3,2:length(colby[1,])])))
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l" , ylim = c(0, max(colby[3,2:length(colby[1,])])))
plot(x = 1:(length(colby[3,]) - 1), y = colby[3,2:length(colby[3,])], type = "l" , ylim = c(0, max(colby[3,2:length(colby[1,])])))
lines(x = 1:(length(colby[1,]) - 1), y = colby[1,2:length(colby[1,])])
lines(x = 1:(length(colby[2,]) - 1), y = colby[2,2:length(colby[2,])])
View(colby)
View(colby)
